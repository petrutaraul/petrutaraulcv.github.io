{"version":3,"sources":["components/r-header/index.js","components/r-about/index.js","components/index.js","serviceWorker.js","index.js"],"names":["RHeader","props","state","window","onscroll","e","this","oldScroll","scrollY","document","getElementById","style","display","windowWidth","innerWidth","innerHTML","className","name","job","href","contact","resume","target","rel","socials","map","item","index","key","link","newTab","src","icon","alt","label","id","Component","RAbout","image","description","Components","data","header","social","about","axios","get","then","response","setState","getData","React","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iVAIaA,G,MAAb,kDACE,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,GAFI,EADrB,iEAOIC,OAAOC,SAAW,SAAUC,GACtBC,KAAKC,UAAYD,KAAKE,QACxBC,SAASC,eAAe,iBAAiBC,MAAMC,QAAU,OAEzDH,SAASC,eAAe,iBAAiBC,MAAMC,QAAU,QAE3DN,KAAKC,UAAYD,KAAKE,SAGxB,IAAIK,EAAcV,OAAOW,WAEvBL,SAASC,eAAe,uBAAuBK,UAD7CF,EAAc,KAEd,qBAEyD,gBArBjE,+BA0BI,IAAMZ,EAAQK,KAAKL,MAEnB,OACE,yBAAKe,UAAU,iCACb,yBAAKA,UAAU,+BACb,wBAAIA,UAAU,2BAA2Bf,EAAMgB,MAC/C,uBAAGD,UAAU,wBAAwBf,EAAMiB,KAC3C,yBAAKF,UAAU,mBACb,uBACEA,UAAU,6CACVG,KAAI,iBAAYlB,EAAMmB,UAFxB,WAMA,uBACEJ,UAAU,2CACVG,KAAMlB,EAAMoB,OACZC,OAAO,SACPC,IAAI,uBAJN,WASF,yBAAKP,UAAU,2BACb,4BACGf,EAAMuB,QAAQC,KAAI,SAACC,EAAMC,GACxB,OACE,wBAAIC,IAAKD,GACP,uBAAGR,KAAMO,EAAKG,KAAMP,OAAQI,EAAKI,OAAS,SAAW,MACnD,yBAAKC,IAAKL,EAAKM,KAAMC,IAAG,UAAKP,EAAKQ,SACjCR,EAAKQ,cAQpB,yBAAKlB,UAAU,gBAAgBmB,GAAG,iBAChC,uBAAGnB,UAAU,sBAAsBmB,GAAG,wBACtC,yBAAKnB,UAAU,6BAlEzB,GAA6BoB,cCAhBC,G,MAAb,kDACE,WAAYpC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,GAFI,EADrB,qDAOI,IAAMD,EAAQK,KAAKL,MAEnB,OACE,yBAAKe,UAAU,wBACb,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,kBAAkBiB,IAAI,WAAWF,IAAK9B,EAAMqC,QAC3D,yBAAKtB,UAAU,iCACb,uBAAGA,UAAU,2BAA2Bf,EAAMsC,oBAd1D,GAA4BH,cCCfI,EAAb,kDACE,aAAe,IAAD,8BACZ,gBACKtC,MAAQ,CACXuC,KAAM,CACJC,OAAQ,CACNzB,KAAM,GACNC,IAAK,GACLE,QAAS,GACTC,OAAQ,GACRsB,OAAQ,IAEVC,MAAO,CACLL,YAAa,GACbD,MAAO,MAbD,EADhB,sDAoBa,IAAD,OACRO,IAAMC,IAAI,8CAA8CC,MAAK,SAACC,GAC5D,IAAMP,EAAOO,EAASP,KACtB,EAAKQ,SAAS,CAAER,cAvBtB,0CA4BInC,KAAK4C,YA5BT,+BAgCI,IAAMT,EAAOnC,KAAKJ,MAAMuC,KAExB,OACE,oCACE,kBAAC,EAAD,CACExB,KAAMwB,EAAKC,OAAOzB,KAClBC,IAAKuB,EAAKC,OAAOxB,IACjBM,QAASiB,EAAKC,OAAOC,OACrBvB,QAASqB,EAAKC,OAAOtB,QACrBC,OAAQoB,EAAKC,OAAOrB,SAGtB,kBAAC,EAAD,CAAQkB,YAAaE,EAAKG,MAAML,YAAaD,MAAOG,EAAKG,MAAMN,aA5CvE,GAAgCa,IAAMf,W,kBCOlBgB,QACW,cAA7BjD,OAAOkD,SAASC,UAEe,UAA7BnD,OAAOkD,SAASC,UAEhBnD,OAAOkD,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFjD,SAASC,eAAe,SDuHpB,kBAAmBiD,WACrBA,UAAUC,cAAcC,MACrBd,MAAK,SAAAe,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7d610b53.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport \"./index.scss\";\n\nexport class RHeader extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  componentDidUpdate() {\n    window.onscroll = function (e) {\n      if (this.oldScroll < this.scrollY) {\n        document.getElementById(\"header__swipe\").style.display = \"none\";\n      } else {\n        document.getElementById(\"header__swipe\").style.display = \"block\";\n      }\n      this.oldScroll = this.scrollY;\n    };\n\n    var windowWidth = window.innerWidth;\n    if (windowWidth < 1200) {\n      document.getElementById(\"header__swipe--text\").innerHTML =\n        \"Swipe up to scroll\";\n    } else {\n      document.getElementById(\"header__swipe--text\").innerHTML = \"Scroll down\";\n    }\n  }\n\n  render() {\n    const props = this.props;\n\n    return (\n      <div className=\"header totalCenter columnFlex\">\n        <div className=\"header__details totalCenter\">\n          <h1 className=\"header__details--header\">{props.name}</h1>\n          <p className=\"header__details--job\">{props.job}</p>\n          <div className=\"header__buttons\">\n            <a\n              className=\"header__details--contact-btn secondary-btn\"\n              href={`mailto:${props.contact}`}\n            >\n              CONTACT\n            </a>\n            <a\n              className=\"header__details--contact-btn primary-btn\"\n              href={props.resume}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              RESUME\n            </a>\n          </div>\n          <div className=\"header__details--social\">\n            <ul>\n              {props.socials.map((item, index) => {\n                return (\n                  <li key={index}>\n                    <a href={item.link} target={item.newTab ? \"_blank\" : null}>\n                      <img src={item.icon} alt={`${item.label}`} />\n                      {item.label}\n                    </a>\n                  </li>\n                );\n              })}\n            </ul>\n          </div>\n        </div>\n        <div className=\"header__swipe\" id=\"header__swipe\">\n          <p className=\"header__swipe--text\" id=\"header__swipe--text\" />\n          <div className=\"header__swipe--bar\" />\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nimport \"./index.scss\";\n\nexport class RAbout extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    const props = this.props;\n\n    return (\n      <div className=\"about-me totalCenter\">\n        <div className=\"wrapper totalCenter\">\n          <img className=\"about-me__image\" alt=\"about me\" src={props.image} />\n          <div className=\"about-me__details totalCenter\">\n            <p className=\"about-me__details--text\">{props.description}</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport axios from \"axios\";\n\nimport { RHeader, RAbout } from \"./components\";\n\nexport class Components extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      data: {\n        header: {\n          name: \"\",\n          job: \"\",\n          contact: \"\",\n          resume: \"\",\n          social: [],\n        },\n        about: {\n          description: \"\",\n          image: \"\",\n        },\n      },\n    };\n  }\n\n  getData() {\n    axios.get(\"https://api.npoint.io/088987bfa1f605d108a5\").then((response) => {\n      const data = response.data;\n      this.setState({ data });\n    });\n  }\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  render() {\n    const data = this.state.data;\n\n    return (\n      <>\n        <RHeader\n          name={data.header.name}\n          job={data.header.job}\n          socials={data.header.social}\n          contact={data.header.contact}\n          resume={data.header.resume}\n        />\n\n        <RAbout description={data.about.description} image={data.about.image} />\n      </>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Components } from \"./components\";\nimport \"./style/general.scss\";\nimport \"./style/reset.scss\";\nimport \"./style/mediaquery.scss\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Components />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}